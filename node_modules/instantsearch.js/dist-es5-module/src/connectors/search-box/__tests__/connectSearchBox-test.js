'use strict';

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _algoliasearchHelper = require('algoliasearch-helper');

var _algoliasearchHelper2 = _interopRequireDefault(_algoliasearchHelper);

var _connectSearchBox = require('../connectSearchBox.js');

var _connectSearchBox2 = _interopRequireDefault(_connectSearchBox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SearchResults = _algoliasearchHelper2.default.SearchResults;

var fakeClient = { addAlgoliaAgent: function addAlgoliaAgent() {} };

describe('connectSearchBox', function () {
  it('Renders during init and render', function () {
    // test that the dummyRendering is called with the isFirstRendering
    // flag set accordingly
    var rendering = _sinon2.default.stub();
    var makeWidget = (0, _connectSearchBox2.default)(rendering);

    var widget = makeWidget({
      foo: 'bar' // dummy param passed to `renderFn`
    });

    expect(widget.getConfiguration).toBe(undefined);

    var helper = (0, _algoliasearchHelper2.default)(fakeClient);
    helper.search = _sinon2.default.stub();

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    {
      // should call the rendering once with isFirstRendering to true
      expect(rendering.callCount).toBe(1);
      var isFirstRendering = rendering.lastCall.args[1];
      expect(isFirstRendering).toBe(true);

      // should provide good values for the first rendering
      var _rendering$lastCall$a = rendering.lastCall.args[0],
          query = _rendering$lastCall$a.query,
          widgetParams = _rendering$lastCall$a.widgetParams;

      expect(query).toBe(helper.state.query);
      expect(widgetParams).toEqual({ foo: 'bar' });
    }

    widget.render({
      results: new SearchResults(helper.state, [{}]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    {
      // Should call the rendering a second time, with isFirstRendering to false
      expect(rendering.callCount).toBe(2);
      var _isFirstRendering = rendering.lastCall.args[1];
      expect(_isFirstRendering).toBe(false);

      // should provide good values after the first search
      var _rendering$lastCall$a2 = rendering.lastCall.args[0],
          _query = _rendering$lastCall$a2.query,
          _widgetParams = _rendering$lastCall$a2.widgetParams;

      expect(_query).toBe(helper.state.query);
      expect(_widgetParams).toEqual({ foo: 'bar' });
    }
  });

  it('Provides a function to update the refinements at each step', function () {
    var rendering = _sinon2.default.stub();
    var makeWidget = (0, _connectSearchBox2.default)(rendering);

    var widget = makeWidget();

    var helper = (0, _algoliasearchHelper2.default)(fakeClient);
    helper.search = _sinon2.default.stub();

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    {
      // first rendering
      expect(helper.state.query).toBe('');
      var renderOptions = rendering.lastCall.args[0];
      var refine = renderOptions.refine;

      refine('bip');
      expect(helper.state.query).toBe('bip');
      expect(helper.search.callCount).toBe(1);
    }

    widget.render({
      results: new SearchResults(helper.state, [{}]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    {
      // Second rendering
      expect(helper.state.query).toBe('bip');
      var _renderOptions = rendering.lastCall.args[0];
      var _refine = _renderOptions.refine,
          query = _renderOptions.query;

      expect(query).toBe('bip');
      _refine('bop');
      expect(helper.state.query).toBe('bop');
      expect(helper.search.callCount).toBe(2);
    }
  });

  it('provides a function to clear the query and perform new search', function () {
    var rendering = _sinon2.default.stub();
    var makeWidget = (0, _connectSearchBox2.default)(rendering);

    var widget = makeWidget();

    var helper = (0, _algoliasearchHelper2.default)(fakeClient);
    helper.search = _sinon2.default.stub();

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    {
      // first rendering
      expect(helper.state.query).toBe('');
      var renderOptions = rendering.lastCall.args[0];
      var refine = renderOptions.refine;

      refine('bip');
      expect(helper.state.query).toBe('bip');
      expect(helper.search.callCount).toBe(1);
    }

    widget.render({
      results: new SearchResults(helper.state, [{}]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    {
      // Second rendering
      expect(helper.state.query).toBe('bip');
      var _renderOptions2 = rendering.lastCall.args[0];
      var clear = _renderOptions2.clear,
          query = _renderOptions2.query;

      expect(query).toBe('bip');
      clear();
      expect(helper.state.query).toBe('');
      expect(helper.search.callCount).toBe(2);
    }
  });

  it('queryHook parameter let the dev control the behavior of the search', function () {
    var rendering = _sinon2.default.stub();
    var makeWidget = (0, _connectSearchBox2.default)(rendering);

    // letSearchThrough will control if the provided function should be called
    var letSearchThrough = false;
    var queryHook = _sinon2.default.spy(function (q, search) {
      if (letSearchThrough) search(q);
    });

    var widget = makeWidget({
      queryHook: queryHook
    });

    var helper = (0, _algoliasearchHelper2.default)(fakeClient);
    helper.search = _sinon2.default.stub();

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    {
      // first rendering
      var renderOptions = rendering.lastCall.args[0];
      var refine = renderOptions.refine;


      refine('bip');
      expect(queryHook.callCount).toBe(1);
      expect(helper.state.query).toBe('');
      expect(helper.search.callCount).toBe(0);

      letSearchThrough = true;
      refine('bip');
      expect(queryHook.callCount).toBe(2);
      expect(helper.state.query).toBe('bip');
      expect(helper.search.callCount).toBe(1);
    }

    // reset the hook behavior
    letSearchThrough = false;

    widget.render({
      results: new SearchResults(helper.state, [{}]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    {
      // Second rendering
      var _renderOptions3 = rendering.lastCall.args[0];
      var _refine2 = _renderOptions3.refine;


      _refine2('bop');
      expect(queryHook.callCount).toBe(3);
      expect(helper.state.query).toBe('bip');
      expect(helper.search.callCount).toBe(1);

      letSearchThrough = true;
      _refine2('bop');
      expect(queryHook.callCount).toBe(4);
      expect(helper.state.query).toBe('bop');
      expect(helper.search.callCount).toBe(2);
    }
  });

  it('should always provide the same refine() and clear() function reference', function () {
    var rendering = _sinon2.default.stub();
    var makeWidget = (0, _connectSearchBox2.default)(rendering);

    var widget = makeWidget();

    var helper = (0, _algoliasearchHelper2.default)(fakeClient);
    helper.search = _sinon2.default.stub();

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    widget.render({
      results: new SearchResults(helper.state, [{}]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    var firstRenderOptions = rendering.lastCall.args[0];

    widget.render({
      results: new SearchResults(helper.state, [{}]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    var secondRenderOptions = rendering.lastCall.args[0];

    expect(firstRenderOptions.clear).toBe(secondRenderOptions.clear);
    expect(firstRenderOptions.refine).toBe(secondRenderOptions.refine);
  });

  it('should clear on init as well', function () {
    var rendering = _sinon2.default.stub();
    var makeWidget = (0, _connectSearchBox2.default)(rendering);

    var widget = makeWidget();

    var helper = (0, _algoliasearchHelper2.default)(fakeClient);
    helper.search = _sinon2.default.stub();
    helper.setQuery('foobar');

    expect(helper.state.query).toBe('foobar');

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    var renderingOptions = rendering.lastCall.args[0];
    renderingOptions.clear();

    expect(helper.state.query).toBe('');
    expect(helper.search.called).toBe(true);
  });
});