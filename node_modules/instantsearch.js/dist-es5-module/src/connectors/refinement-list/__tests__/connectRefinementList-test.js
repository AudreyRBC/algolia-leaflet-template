'use strict';

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _algoliasearchHelper = require('algoliasearch-helper');

var _algoliasearchHelper2 = _interopRequireDefault(_algoliasearchHelper);

var _connectRefinementList = require('../connectRefinementList.js');

var _connectRefinementList2 = _interopRequireDefault(_connectRefinementList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SearchResults = _algoliasearchHelper2.default.SearchResults;

var fakeClient = { addAlgoliaAgent: function addAlgoliaAgent() {} };

describe('connectRefinementList', function () {
  var rendering = void 0;
  var makeWidget = void 0;
  beforeEach(function () {
    rendering = _sinon2.default.stub();
    makeWidget = (0, _connectRefinementList2.default)(rendering);
  });

  it('throws on bad usage', function () {
    expect(_connectRefinementList2.default).toThrow();

    expect(function () {
      return (0, _connectRefinementList2.default)({
        operator: 'and'
      });
    }).toThrow();

    expect(function () {
      return (0, _connectRefinementList2.default)(function () {})();
    }).toThrow();

    expect(function () {
      return (0, _connectRefinementList2.default)(function () {})({
        operator: 'and'
      });
    }).toThrow();

    expect(function () {
      return (0, _connectRefinementList2.default)(function () {})({
        attributeName: 'company',
        operator: 'YUP'
      });
    }).toThrow();
  });

  describe('options configuring the helper', function () {
    it('`attributeName`', function () {
      var widget = makeWidget({
        attributeName: 'myFacet'
      });

      expect(widget.getConfiguration()).toEqual({
        disjunctiveFacets: ['myFacet']
      });
    });

    it('`limit`', function () {
      var widget = makeWidget({
        attributeName: 'myFacet',
        limit: 20
      });

      expect(widget.getConfiguration()).toEqual({
        disjunctiveFacets: ['myFacet'],
        maxValuesPerFacet: 20
      });

      expect(widget.getConfiguration({ maxValuesPerFacet: 100 })).toEqual({
        disjunctiveFacets: ['myFacet'],
        maxValuesPerFacet: 100
      }, 'Can read the previous maxValuesPerFacet value');
    });

    it('`operator="and"`', function () {
      var widget = makeWidget({
        attributeName: 'myFacet',
        operator: 'and'
      });

      expect(widget.getConfiguration()).toEqual({
        facets: ['myFacet']
      });
    });
  });

  it('Renders during init and render', function () {
    // test that the dummyRendering is called with the isFirstRendering
    // flag set accordingly
    var widget = makeWidget({
      attributeName: 'myFacet',
      limit: 9
    });

    var config = widget.getConfiguration({});
    expect(config).toEqual({
      disjunctiveFacets: ['myFacet'],
      maxValuesPerFacet: 9
    });

    // test if widget is not rendered yet at this point
    expect(rendering.callCount).toBe(0);

    var helper = (0, _algoliasearchHelper2.default)(fakeClient, '', config);
    helper.search = _sinon2.default.stub();

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    // test that rendering has been called during init with isFirstRendering = true
    expect(rendering.callCount).toBe(1);
    // test if isFirstRendering is true during init
    expect(rendering.lastCall.args[1]).toBe(true);

    var firstRenderingOptions = rendering.lastCall.args[0];
    expect(firstRenderingOptions.canRefine).toBe(false);
    expect(firstRenderingOptions.widgetParams).toEqual({
      attributeName: 'myFacet',
      limit: 9
    });

    widget.render({
      results: new SearchResults(helper.state, [{}]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    // test that rendering has been called during init with isFirstRendering = false
    expect(rendering.callCount).toBe(2);
    expect(rendering.lastCall.args[1]).toBe(false);

    var secondRenderingOptions = rendering.lastCall.args[0];
    expect(secondRenderingOptions.canRefine).toBe(false);
    expect(secondRenderingOptions.widgetParams).toEqual({
      attributeName: 'myFacet',
      limit: 9
    });
  });

  it('Provide a function to clear the refinements at each step', function () {
    var widget = makeWidget({
      attributeName: 'category'
    });

    var helper = (0, _algoliasearchHelper2.default)(fakeClient, '', widget.getConfiguration({}));
    helper.search = _sinon2.default.stub();

    helper.toggleRefinement('category', 'value');

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    var firstRenderingOptions = rendering.lastCall.args[0];
    var refine = firstRenderingOptions.refine;

    refine('value');
    expect(helper.hasRefinements('category')).toBe(false);
    refine('value');
    expect(helper.hasRefinements('category')).toBe(true);

    widget.render({
      results: new SearchResults(helper.state, [{}, {}]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    var secondRenderingOptions = rendering.lastCall.args[0];
    var renderToggleRefinement = secondRenderingOptions.refine;

    renderToggleRefinement('value');
    expect(helper.hasRefinements('category')).toBe(false);
    renderToggleRefinement('value');
    expect(helper.hasRefinements('category')).toBe(true);
  });

  it('If there are too few items then canToggleShowMore is false', function () {
    var widget = makeWidget({
      attributeName: 'category',
      limit: 3,
      showMoreLimit: 10
    });

    var helper = (0, _algoliasearchHelper2.default)(fakeClient, '', widget.getConfiguration({}));
    helper.search = _sinon2.default.stub();

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    widget.render({
      results: new SearchResults(helper.state, [{
        hits: [],
        facets: {
          category: {
            c1: 880,
            c2: 47
          }
        }
      }, {
        facets: {
          category: {
            c1: 880,
            c2: 47
          }
        }
      }]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    var secondRenderingOptions = rendering.lastCall.args[0];
    expect(secondRenderingOptions.canToggleShowMore).toBe(false);
  });

  it('If there are too few items then canToggleShowMore is false', function () {
    var widget = makeWidget({
      attributeName: 'category',
      limit: 1,
      showMoreLimit: 10
    });

    var helper = (0, _algoliasearchHelper2.default)(fakeClient, '', widget.getConfiguration({}));
    helper.search = _sinon2.default.stub();

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    widget.render({
      results: new SearchResults(helper.state, [{
        hits: [],
        facets: {
          category: {
            c1: 880,
            c2: 47
          }
        }
      }, {
        facets: {
          category: {
            c1: 880,
            c2: 47
          }
        }
      }]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    var secondRenderingOptions = rendering.lastCall.args[0];
    expect(secondRenderingOptions.canToggleShowMore).toBe(true);

    // toggleShowMore will set the state of the show more to true
    // therefore it's always possible to go back and show less items
    secondRenderingOptions.toggleShowMore();

    var thirdRenderingOptions = rendering.lastCall.args[0];
    expect(thirdRenderingOptions.canToggleShowMore).toBe(true);
  });

  it('Show more should toggle between two limits', function () {
    var widget = makeWidget({
      attributeName: 'category',
      limit: 1,
      showMoreLimit: 3
    });

    var helper = (0, _algoliasearchHelper2.default)(fakeClient, '', widget.getConfiguration({}));
    helper.search = _sinon2.default.stub();

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    widget.render({
      results: new SearchResults(helper.state, [{
        hits: [],
        facets: {
          category: {
            c1: 880,
            c2: 47,
            c3: 880,
            c4: 47
          }
        }
      }, {
        facets: {
          category: {
            c1: 880,
            c2: 47,
            c3: 880,
            c4: 47
          }
        }
      }]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    var secondRenderingOptions = rendering.lastCall.args[0];
    expect(secondRenderingOptions.items).toEqual([{
      label: 'c1',
      value: 'c1',
      highlighted: 'c1',
      count: 880,
      isRefined: false
    }]);

    // toggleShowMore does a new render
    secondRenderingOptions.toggleShowMore();

    var thirdRenderingOptions = rendering.lastCall.args[0];
    expect(thirdRenderingOptions.items).toEqual([{
      label: 'c1',
      value: 'c1',
      highlighted: 'c1',
      count: 880,
      isRefined: false
    }, {
      label: 'c3',
      value: 'c3',
      highlighted: 'c3',
      count: 880,
      isRefined: false
    }, {
      label: 'c2',
      value: 'c2',
      highlighted: 'c2',
      count: 47,
      isRefined: false
    }]);
  });

  it('Provide a function to clear the refinements at each step', function () {
    var widget = makeWidget({
      attributeName: 'category'
    });

    var helper = (0, _algoliasearchHelper2.default)(fakeClient, '', widget.getConfiguration({}));
    helper.search = _sinon2.default.stub();

    helper.toggleRefinement('category', 'value');

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    var firstRenderingOptions = rendering.lastCall.args[0];
    var refine = firstRenderingOptions.refine;

    refine('value');
    expect(helper.hasRefinements('category')).toBe(false);
    refine('value');
    expect(helper.hasRefinements('category')).toBe(true);

    widget.render({
      results: new SearchResults(helper.state, [{}, {}]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    var secondRenderingOptions = rendering.lastCall.args[0];
    var renderToggleRefinement = secondRenderingOptions.refine;

    renderToggleRefinement('value');
    expect(helper.hasRefinements('category')).toBe(false);
    renderToggleRefinement('value');
    expect(helper.hasRefinements('category')).toBe(true);
  });

  it('hasExhaustiveItems indicates if the items provided are exhaustive', function () {
    var widget = makeWidget({
      attributeName: 'category',
      limit: 2
    });

    var helper = (0, _algoliasearchHelper2.default)(fakeClient, '', widget.getConfiguration({}));
    helper.search = _sinon2.default.stub();

    widget.init({
      helper: helper,
      state: helper.state,
      createURL: function createURL() {
        return '#';
      },
      onHistoryChange: function onHistoryChange() {}
    });

    expect(rendering.lastCall.args[0].hasExhaustiveItems).toEqual(true);

    widget.render({
      results: new SearchResults(helper.state, [{
        hits: [],
        facets: {
          category: {
            c1: 880
          }
        }
      }, {
        facets: {
          category: {
            c1: 880
          }
        }
      }]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    expect(rendering.lastCall.args[0].hasExhaustiveItems).toEqual(true);

    widget.render({
      results: new SearchResults(helper.state, [{
        hits: [],
        facets: {
          category: {
            c1: 880,
            c2: 34,
            c3: 440
          }
        }
      }, {
        facets: {
          category: {
            c1: 880,
            c2: 34,
            c3: 440
          }
        }
      }]),
      state: helper.state,
      helper: helper,
      createURL: function createURL() {
        return '#';
      }
    });

    expect(rendering.lastCall.args[0].hasExhaustiveItems).toEqual(false);
  });
});